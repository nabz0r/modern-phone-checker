"""Interface en ligne de commande avanc√©e avec affichage riche."""

import asyncio
import sys
from pathlib import Path
from typing import List, Optional

import click
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, TimeElapsedColumn
from rich.tree import Tree
from rich.json import JSON
from rich import box
from datetime import datetime

from . import PhoneChecker
from .models import PhoneCheckResponse, VerificationStatus
from .utils import validate_phone_number, format_phone_number
from .config import default_config
from .logging import logger

console = Console()

def format_timestamp(timestamp):
    """Formate un timestamp de mani√®re lisible."""
    return timestamp.strftime("%H:%M:%S %d/%m/%Y")

def get_status_emoji(status: VerificationStatus, exists: bool) -> str:
    """Retourne l'emoji appropri√© pour un statut."""
    if status == VerificationStatus.EXISTS:
        return "‚úÖ"
    elif status == VerificationStatus.NOT_EXISTS:
        return "‚ùå"
    elif status == VerificationStatus.ERROR:
        return "‚ùå"
    elif status == VerificationStatus.TIMEOUT:
        return "‚è∞"
    elif status == VerificationStatus.RATE_LIMITED:
        return "üö´"
    else:
        return "‚ùì"

def create_result_table(response: PhoneCheckResponse) -> Table:
    """Cr√©e un tableau rich pour afficher les r√©sultats."""
    table = Table(box=box.ROUNDED, show_header=True, header_style="bold cyan")
    table.add_column("Plateforme", style="cyan bold", width=12)
    table.add_column("Statut", style="green bold", width=15)
    table.add_column("D√©tails", style="yellow", min_width=20)
    table.add_column("Confiance", style="blue", width=10)
    table.add_column("Temps", style="magenta", width=12)
    
    for result in response.results:
        # Status avec emoji
        status_text = get_status_emoji(result.status, result.exists)
        if result.exists:
            status_text += " [green]Trouv√©[/green]"
        else:
            status_text += " [red]Non trouv√©[/red]"
        
        if result.error:
            status_text = "‚ùå [red]Erreur[/red]"
        
        # D√©tails
        details = []
        if result.error:
            details.append(f"[red]Erreur:[/red] {result.error[:50]}...")
        if result.username:
            details.append(f"[blue]@{result.username}[/blue]")
        if result.is_cached:
            freshness = result.metadata.get('freshness_score', 0)
            details.append(f"[dim]Cache ({freshness:.1%})[/dim]")
        if result.metadata.get('method'):
            details.append(f"[dim]{result.metadata['method']}[/dim]")
        
        details_text = "\n".join(details) if details else "-"
        
        # Score de confiance
        confidence = f"{result.confidence_score:.1%}" if result.confidence_score > 0 else "-"
        
        # Temps de r√©ponse
        time_text = f"{result.response_time:.0f}ms" if result.response_time > 0 else "-"
        
        table.add_row(
            result.platform.upper(),
            status_text,
            details_text,
            confidence,
            time_text
        )
    
    return table

def create_summary_panel(response: PhoneCheckResponse) -> Panel:
    """Cr√©e un panneau de r√©sum√©."""
    found_count = len(response.platforms_found)
    not_found_count = len(response.platforms_not_found)
    error_count = len(response.platforms_error)
    
    summary_text = f"""[bold]R√©sultats pour {response.request.full_number}[/bold]

üìä [cyan]Statistiques:[/cyan]
   ‚Ä¢ Plateformes v√©rifi√©es: {len(response.results)}
   ‚Ä¢ Trouv√© sur: [green]{found_count}[/green] plateforme(s)
   ‚Ä¢ Non trouv√© sur: [yellow]{not_found_count}[/yellow] plateforme(s)
   ‚Ä¢ Erreurs: [red]{error_count}[/red]
   ‚Ä¢ Taux de succ√®s: [blue]{response.success_rate:.1%}[/blue]
   ‚Ä¢ Temps total: [magenta]{response.total_time:.1f}ms[/magenta]

üéØ [cyan]Plateformes o√π le num√©ro existe:[/cyan]
   {', '.join(response.platforms_found) if response.platforms_found else 'Aucune'}
"""
    
    if response.platforms_error:
        summary_text += f"\n\n‚ö†Ô∏è  [yellow]Plateformes avec erreurs:[/yellow]\n   {', '.join(response.platforms_error)}"
    
    return Panel(
        summary_text,
        title="R√©sum√© de la v√©rification",
        border_style="cyan"
    )

@click.group()
@click.option('--config', '-c', help='Fichier de configuration personnalis√©')
@click.option('--verbose', '-v', is_flag=True, help='Mode verbeux')
@click.option('--quiet', '-q', is_flag=True, help='Mode silencieux')
@click.pass_context
def cli(ctx, config, verbose, quiet):
    """Modern Phone Checker - V√©rifiez des num√©ros sur les r√©seaux sociaux."""
    ctx.ensure_object(dict)
    ctx.obj['config'] = config
    ctx.obj['verbose'] = verbose
    ctx.obj['quiet'] = quiet
    
    # Configure le niveau de log
    if verbose:
        default_config.logging.level = 'DEBUG'
    elif quiet:
        default_config.logging.level = 'ERROR'

@cli.command()
@click.argument('phone')
@click.option('--country', '-c', default='33', help='Code pays (d√©faut: 33 pour France)')
@click.option('--platforms', '-p', multiple=True, help='Plateformes √† v√©rifier')
@click.option('--force-refresh', '-f', is_flag=True, help='Force le rafra√Æchissement du cache')
@click.option('--json-output', '-j', is_flag=True, help='Sortie au format JSON')
@click.option('--no-cache', is_flag=True, help='D√©sactive le cache')
@click.pass_context
def check(ctx, phone: str, country: str, platforms: tuple, force_refresh: bool, json_output: bool, no_cache: bool):
    """V√©rifie un num√©ro de t√©l√©phone sur diff√©rentes plateformes."""
    async def run():
        # Validation du num√©ro
        if not validate_phone_number(phone, country):
            if not ctx.obj['quiet']:
                console.print(Panel(
                    f"[red]Format de num√©ro invalide![/red]\n\n"
                    f"Le num√©ro {phone} ne semble pas valide pour le pays +{country}.\n"
                    f"Format attendu: num√©ro sans l'indicatif pays.",
                    title="‚ùå Erreur de validation",
                    border_style="red"
                ))
            sys.exit(1)
        
        # Formate le num√©ro pour l'affichage
        formatted_number = format_phone_number(phone, country, 'international')
        if not formatted_number:
            formatted_number = f"+{country} {phone}"
        
        # Configuration du checker
        platforms_list = list(platforms) if platforms else None
        
        try:
            async with PhoneChecker(
                platforms=platforms_list,
                use_cache=not no_cache
            ) as checker:
                
                if not ctx.obj['quiet'] and not json_output:
                    with Progress(
                        SpinnerColumn(),
                        TextColumn("[progress.description]{task.description}"),
                        TimeElapsedColumn(),
                        console=console
                    ) as progress:
                        task = progress.add_task(
                            f"V√©rification de {formatted_number}...", 
                            total=None
                        )
                        
                        response = await checker.check_number(
                            phone, country, platforms_list, force_refresh
                        )
                else:
                    response = await checker.check_number(
                        phone, country, platforms_list, force_refresh
                    )
                
                # Affichage des r√©sultats
                if json_output:
                    console.print(JSON.from_data(response.to_dict()))
                else:
                    if not ctx.obj['quiet']:
                        console.print("\n")
                        console.print(create_summary_panel(response))
                        console.print("\n")
                        console.print(create_result_table(response))
                    
                    # Code de sortie bas√© sur les r√©sultats
                    if response.platforms_found:
                        sys.exit(0)  # Trouv√© sur au moins une plateforme
                    elif response.platforms_error:
                        sys.exit(2)  # Erreurs rencontr√©es
                    else:
                        sys.exit(1)  # Non trouv√©
        
        except ValueError as e:
            console.print(f"[red]Erreur:[/red] {e}")
            sys.exit(1)
        except Exception as e:
            console.print(f"[red]Erreur inattendue:[/red] {e}")
            if ctx.obj['verbose']:
                console.print_exception()
            sys.exit(1)
    
    asyncio.run(run())

@cli.command()
@click.argument('file', type=click.Path(exists=True))
@click.option('--country', '-c', default='33', help='Code pays par d√©faut')
@click.option('--output', '-o', help='Fichier de sortie JSON')
@click.option('--platforms', '-p', multiple=True, help='Plateformes √† v√©rifier')
@click.option('--concurrent', default=5, help='Nombre de v√©rifications simultan√©es')
@click.pass_context
def batch(ctx, file: str, country: str, output: str, platforms: tuple, concurrent: int):
    """V√©rifie plusieurs num√©ros depuis un fichier."""
    async def run():
        import csv
        import json
        
        numbers = []
        
        # Lecture du fichier
        try:
            with open(file, 'r', encoding='utf-8') as f:
                if file.endswith('.csv'):
                    reader = csv.DictReader(f)
                    for row in reader:
                        phone_num = row.get('phone', '').strip()
                        country_code = row.get('country_code', country).strip()
                        if phone_num:
                            numbers.append({'phone': phone_num, 'country_code': country_code})
                else:
                    # Fichier texte simple
                    for line in f:
                        phone_num = line.strip()
                        if phone_num:
                            numbers.append({'phone': phone_num, 'country_code': country})
        
        except Exception as e:
            console.print(f"[red]Erreur lors de la lecture du fichier:[/red] {e}")
            sys.exit(1)
        
        console.print(f"[cyan]Traitement de {len(numbers)} num√©ros...[/cyan]")
        
        platforms_list = list(platforms) if platforms else None
        results = []
        
        async with PhoneChecker(platforms=platforms_list) as checker:
            # Limite la concurrence
            semaphore = asyncio.Semaphore(concurrent)
            
            async def check_number(number_info):
                async with semaphore:
                    try:
                        return await checker.check_number(
                            number_info['phone'], 
                            number_info['country_code'],
                            platforms_list
                        )
                    except Exception as e:
                        logger.error(f"Erreur pour {number_info}: {e}")
                        return None
            
            # Progress bar pour le traitement par lots
            with Progress(console=console) as progress:
                task = progress.add_task("V√©rification...", total=len(numbers))
                
                tasks = [check_number(num_info) for num_info in numbers]
                
                for coro in asyncio.as_completed(tasks):
                    result = await coro
                    if result:
                        results.append(result)
                    progress.advance(task)
        
        # Sauvegarde des r√©sultats
        output_data = {
            'processed_at': datetime.now().isoformat(),
            'total_numbers': len(numbers),
            'successful_checks': len(results),
            'results': [r.to_dict() for r in results]
        }
        
        if output:
            with open(output, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=2, ensure_ascii=False)
            console.print(f"[green]R√©sultats sauvegard√©s dans {output}[/green]")
        else:
            console.print(JSON.from_data(output_data))
    
    asyncio.run(run())

@cli.command()
@click.pass_context
def stats(ctx):
    """Affiche les statistiques du cache et de l'application."""
    async def run():
        async with PhoneChecker() as checker:
            # Statistiques du checker
            checker_stats = checker.get_stats()
            
            # Informations du cache si disponible
            cache_info = None
            if checker.use_cache:
                cache_info = await checker.cache.get_cache_info()
            
            # Affichage des statistiques du checker
            stats_tree = Tree("üìä [bold cyan]Statistiques Phone Checker[/bold cyan]")
            
            # N≈ìud pour les v√©rifications
            verification_node = stats_tree.add("üîç [bold]V√©rifications[/bold]")
            verification_node.add(f"Total: {checker_stats['total_checks']}")
            verification_node.add(f"Succ√®s: [green]{checker_stats['successful_checks']}[/green]")
            verification_node.add(f"√âchecs: [red]{checker_stats['failed_checks']}[/red]")
            verification_node.add(f"Taux de succ√®s: [blue]{checker_stats['success_rate']:.1%}[/blue]")
            
            # N≈ìud pour les plateformes
            platforms_node = stats_tree.add("üåê [bold]Plateformes[/bold]")
            for platform in checker_stats['available_platforms']:
                platforms_node.add(f"‚úÖ {platform}")
            
            # N≈ìud pour le cache
            if cache_info:
                cache_node = stats_tree.add("üíæ [bold]Cache[/bold]")
                cache_stats = cache_info['stats']
                cache_node.add(f"Entr√©es: {cache_stats['entries_count']}")
                cache_node.add(f"Taille: {cache_stats['size_formatted']}")
                cache_node.add(f"Hits: [green]{cache_stats['hits']}[/green]")
                cache_node.add(f"Misses: [yellow]{cache_stats['misses']}[/yellow]")
                cache_node.add(f"Taux de hit: [blue]{cache_stats['hit_rate']:.1%}[/blue]")
                cache_node.add(f"Utilisation: [magenta]{cache_stats['usage_percent']:.1f}%[/magenta]")
            
            console.print(stats_tree)
            
            # Sant√© des composants
            health = await checker.health_check()
            
            health_panel = Panel(
                f"[bold]Statut g√©n√©ral:[/bold] {health['status'].upper()}\n"
                f"[bold]Derni√®re v√©rification:[/bold] {health['timestamp']}\n\n"
                + "\n".join([
                    f"[cyan]{comp}:[/cyan] {info['status']}"
                    for comp, info in health['components'].items()
                ]),
                title="üè• √âtat de sant√©",
                border_style="green" if health['status'] == 'healthy' else "yellow"
            )
            
            console.print("\n")
            console.print(health_panel)
    
    asyncio.run(run())

@cli.command()
@click.option('--confirm', is_flag=True, help='Confirme la suppression')
@click.pass_context
def clear_cache(ctx, confirm):
    """Vide le cache compl√®tement."""
    async def run():
        if not confirm:
            if not click.confirm("√ätes-vous s√ªr de vouloir vider le cache ?"):
                console.print("[yellow]Op√©ration annul√©e.[/yellow]")
                return
        
        async with PhoneChecker() as checker:
            if not checker.use_cache:
                console.print("[yellow]Le cache n'est pas activ√©.[/yellow]")
                return
            
            await checker.clear_cache()
            console.print("[green]‚úÖ Cache vid√© avec succ√®s![/green]")
    
    asyncio.run(run())

@cli.command()
@click.pass_context
def config_show(ctx):
    """Affiche la configuration actuelle."""
    config_data = {
        'cache': {
            'enabled': default_config.cache.enabled,
            'directory': default_config.cache.directory,
            'expire_after': default_config.cache.expire_after,
            'max_size_mb': default_config.cache.max_size_mb
        },
        'logging': {
            'level': default_config.logging.level,
            'console_output': default_config.logging.console_output,
            'file_path': default_config.logging.file_path
        },
        'platforms': {}
    }
    
    for platform, config in default_config.platforms.items():
        config_data['platforms'][platform] = {
            'enabled': config.enabled,
            'rate_limit_calls': config.rate_limit_calls,
            'rate_limit_period': config.rate_limit_period,
            'timeout': config.timeout
        }
    
    console.print(Panel(
        JSON.from_data(config_data),
        title="‚öôÔ∏è Configuration actuelle",
        border_style="cyan"
    ))

def main():
    """Point d'entr√©e principal."""
    try:
        cli()
    except KeyboardInterrupt:
        console.print("\n[yellow]Op√©ration interrompue par l'utilisateur.[/yellow]")
        sys.exit(130)
    except Exception as e:
        console.print(f"[red]Erreur fatale:[/red] {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
