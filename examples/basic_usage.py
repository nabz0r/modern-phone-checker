#!/usr/bin/env python3
"""
Exemple d'utilisation basique de Modern Phone Checker.

Ce script montre comment utiliser la biblioth√®que pour v√©rifier
un num√©ro de t√©l√©phone sur diff√©rentes plateformes.
"""

import asyncio
import sys
from phone_checker import PhoneChecker
from phone_checker.logging import logger

async def example_basic_check():
    """Exemple de v√©rification basique d'un num√©ro."""
    print("üîç Exemple 1: V√©rification basique")
    print("=" * 50)
    
    # Num√©ro d'exemple (fictif)
    phone = "612345678"
    country_code = "33"
    
    try:
        async with PhoneChecker() as checker:
            logger.info(f"V√©rification du num√©ro +{country_code} {phone}")
            
            response = await checker.check_number(phone, country_code)
            
            print(f"\nüì± R√©sultats pour +{country_code} {phone}:")
            print(f"   Plateformes v√©rifi√©es: {len(response.results)}")
            print(f"   Trouv√© sur: {len(response.platforms_found)} plateforme(s)")
            print(f"   Temps total: {response.total_time:.1f}ms")
            print(f"   Taux de succ√®s: {response.success_rate:.1%}")
            
            print("\nüìä D√©tails par plateforme:")
            for result in response.results:
                status = "‚úÖ Trouv√©" if result.exists else "‚ùå Non trouv√©"
                if result.error:
                    status = f"‚ö†Ô∏è Erreur: {result.error}"
                
                confidence = f"({result.confidence_score:.1%})" if result.confidence_score > 0 else ""
                cached = " [Cache]" if result.is_cached else ""
                
                print(f"   {result.platform.upper():12} {status} {confidence}{cached}")
                
                if result.username:
                    print(f"                 üë§ @{result.username}")
                    
                if result.response_time > 0:
                    print(f"                 ‚è±Ô∏è {result.response_time:.0f}ms")
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    return True

async def example_specific_platforms():
    """Exemple de v√©rification sur des plateformes sp√©cifiques."""
    print("\nüéØ Exemple 2: Plateformes sp√©cifiques")
    print("=" * 50)
    
    phone = "712345678"
    country_code = "33"
    platforms = ["whatsapp", "telegram"]
    
    try:
        async with PhoneChecker(platforms=platforms) as checker:
            print(f"V√©rification sur {', '.join(platforms)} seulement...")
            
            response = await checker.check_number(
                phone, 
                country_code, 
                platforms=platforms
            )
            
            print(f"\nüì± R√©sultats pour +{country_code} {phone}:")
            for result in response.results:
                print(f"   {result.platform}: {'Trouv√©' if result.exists else 'Non trouv√©'}")
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    return True

async def example_multiple_numbers():
    """Exemple de v√©rification de plusieurs num√©ros."""
    print("\nüìã Exemple 3: V√©rification multiple")
    print("=" * 50)
    
    numbers = [
        {"phone": "612345678", "country_code": "33"},
        {"phone": "712345679", "country_code": "33"},
        {"phone": "5551234567", "country_code": "1"}
    ]
    
    try:
        async with PhoneChecker() as checker:
            print(f"V√©rification de {len(numbers)} num√©ros...")
            
            responses = await checker.check_multiple_numbers(numbers)
            
            print("\nüìä R√©sum√© des r√©sultats:")
            for i, response in enumerate(responses):
                if isinstance(response, Exception):
                    print(f"   Num√©ro {i+1}: ‚ùå Erreur - {response}")
                    continue
                
                number_info = numbers[i]
                found_count = len(response.platforms_found)
                
                print(f"   +{number_info['country_code']} {number_info['phone']}: "
                      f"{found_count} plateforme(s) trouv√©e(s)")
                
                if response.platforms_found:
                    print(f"      ‚îî‚îÄ Trouv√© sur: {', '.join(response.platforms_found)}")
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    return True

async def example_with_cache():
    """Exemple montrant l'utilisation du cache."""
    print("\nüíæ Exemple 4: Utilisation du cache")
    print("=" * 50)
    
    phone = "612345678"
    country_code = "33"
    
    try:
        async with PhoneChecker() as checker:
            # Premi√®re v√©rification (va en cache)
            print("Premi√®re v√©rification (mise en cache)...")
            start_time = asyncio.get_event_loop().time()
            
            response1 = await checker.check_number(phone, country_code)
            time1 = (asyncio.get_event_loop().time() - start_time) * 1000
            
            print(f"   Temps: {time1:.1f}ms")
            
            # Deuxi√®me v√©rification (depuis le cache)
            print("\nDeuxi√®me v√©rification (depuis le cache)...")
            start_time = asyncio.get_event_loop().time()
            
            response2 = await checker.check_number(phone, country_code)
            time2 = (asyncio.get_event_loop().time() - start_time) * 1000
            
            print(f"   Temps: {time2:.1f}ms")
            print(f"   Acc√©l√©ration: {time1/time2:.1f}x plus rapide!")
            
            # V√©rification des donn√©es de cache
            cached_results = [r for r in response2.results if r.is_cached]
            print(f"   R√©sultats en cache: {len(cached_results)}/{len(response2.results)}")
            
            # Statistiques du cache
            stats = checker.get_stats()
            print(f"\nüìä Statistiques du cache:")
            print(f"   Hit rate: {stats['cache_hit_rate']:.1%}")
            print(f"   Hits: {stats['cache_hits']}")
            print(f"   Misses: {stats['cache_misses']}")
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    return True

async def example_health_check():
    """Exemple de v√©rification de sant√© du syst√®me."""
    print("\nüè• Exemple 5: V√©rification de sant√©")
    print("=" * 50)
    
    try:
        async with PhoneChecker() as checker:
            health = await checker.health_check()
            
            print(f"Statut g√©n√©ral: {health['status'].upper()}")
            print(f"Derni√®re v√©rification: {health['timestamp']}")
            
            print("\nüîß √âtat des composants:")
            for component, info in health['components'].items():
                status_emoji = "‚úÖ" if info['status'] == 'healthy' else "‚ö†Ô∏è"
                print(f"   {status_emoji} {component.capitalize()}: {info['status']}")
                
                if 'error' in info:
                    print(f"      ‚îî‚îÄ Erreur: {info['error']}")
                    
                if 'response_time' in info:
                    print(f"      ‚îî‚îÄ Temps de r√©ponse: {info['response_time']:.1f}ms")
    
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False
    
    return True

async def main():
    """Fonction principale qui lance tous les exemples."""
    print("üöÄ Modern Phone Checker - Exemples d'utilisation")
    print("=" * 60)
    print("‚ö†Ô∏è  Note: Ces exemples utilisent des num√©ros fictifs")
    print("=" * 60)
    
    examples = [
        example_basic_check,
        example_specific_platforms,
        example_multiple_numbers,
        example_with_cache,
        example_health_check
    ]
    
    results = []
    for example in examples:
        try:
            result = await example()
            results.append(result)
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Exemples interrompus par l'utilisateur")
            break
        except Exception as e:
            print(f"‚ùå Erreur dans l'exemple: {e}")
            results.append(False)
    
    # R√©sum√© final
    successful = sum(results)
    total = len(results)
    
    print(f"\n‚ú® R√©sum√© des exemples:")
    print(f"   R√©ussis: {successful}/{total}")
    print(f"   Taux de succ√®s: {successful/total:.1%}")
    
    if successful == total:
        print("\nüéâ Tous les exemples ont √©t√© ex√©cut√©s avec succ√®s!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {total - successful} exemple(s) ont √©chou√©.")
        return 1

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã Au revoir!")
        sys.exit(0)
